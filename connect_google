#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 15 10:15:24 2019

@author: xiqiaoliu
"""

import httplib2 
from oauth2client.service_account import ServiceAccountCredentials
from apiclient.discovery import build 
import psycopg2 


# Authenticate and create the service for the core reporting API

def get_api_traffic_query(service):
    return service.data().ga().get(ids='ga:170644537',
                       start_date='1daysAgo',
                       end_date='yesterday',
                       metrics='ga:users,ga:sessions,ga:bounceRate,ga:avgSessionDuration,ga:organicSearches,ga:pageviews,ga:avgTimeOnPage,ga:exitRate,ga:searchUniques,ga:sessionsPerUser',
                       dimensions='ga:date')

# where do users enter the ARF website
#def get_api_source_query(source):
#    return source.data().ga().get(ids='ga:170644537',
#                      start_date='1dayAgo',
#                      end_date='yesterday',
#                      metrics='users',
#                      dimentions='source')

def main():
    # Connect to Postgres
    try:
        conn = psycopg2.connect(user="postgres",host="127.0.0.1",port="5432",database="ARF_DB",password=" ")
        cur = conn.cursor()
    
    except:
        print('Failed to connect to the database.')
    credentials = ServiceAccountCredentials.from_json_keyfile_name('ARFDB-59f377a3937a.json',['https://www.googleapis.com/auth/analytics.readonly'])
    http = httplib2.Http()
    http_auth = credentials.authorize(http)
    service = build('analytics','v3',http=http_auth)
    traffic_results = get_api_traffic_query(service).execute()
    
    # Insert each row of the results set
    
    if traffic_results.get('rows',[]):
        for row in traffic_results.get('rows'):
            cur.execute("""insert into ga_traffic values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""",[row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7],row[8],row[9],row[10]])
            ## The main data returned from the API is returned as a 
            ## 2-dimensional List of strings. The outer list represents all the rows of data.
            ## Each inner list represents a single row, where the order of cells
            ## in a row is same as the fields in the column header 
    else:
        print('No rows found.')
    
#    source_results = get_api_traffic_query(service).execute()
#    
#    if source_results.get('rows',[]):
#        for row in source_results.get('rows'):
#            cur.execute()
   
    conn.commit()
    cur.close()
    conn.close()
    
if __name__ == '__main__':
    main()
    
    
# ("Date","Users","Sessions","Bounce Rate","Avg. Session Duration","Organic Searches","Pageviews","Avg. Time on Page","% Exit","Total Unique Searches","Number of Sessions per User")
