#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 17 14:05:27 2019

@author: xiqiaoliu
"""

from selenium import webdriver
import psycopg2
import time 
import glob
import pandas as pd
from sqlalchemy import create_engine
import io


driver=webdriver.Chrome(r'/usr/local/bin/chromedriver')
driver.implicitly_wait(2)

# Log in 
def fillform(driver):
    username = ' '
    password = ' '
    try:
        driver.find_element_by_xpath('//*[@id="uno-reg-join"]/div/div/div/div[2]/div[1]/div[1]/div[2]/p/a').click()
    except:
        pass
    driver.find_element_by_xpath('//*[@id="username"]').send_keys(username)
    driver.find_element_by_xpath('//*[@id="password"]').send_keys(password)
    driver.find_element_by_xpath('//*[@id="app__container"]/main/div/form/div[3]/button').click()


# download "Visitor" data fileï¼Œand
def get_visitors(driver):
    driver.find_element_by_xpath('//*[@id="ember88"]/button').click()
    driver.find_element_by_xpath('//div[@class="org-analytics__export-modal-timepicker-container t-14 t-black--light t-normal"]').click()
    driver.find_element_by_xpath('//artdeco-dropdown-item[text()="Last 30 days"]').click()
    driver.find_element_by_xpath('//button[text()="Export"]').click()
    
# download "Update" data file
def get_update(driver):
    driver.get('https://www.linkedin.com/company/45891/admin/analytics/updates/')
    driver.find_element_by_xpath('//button[@class="fr mlA mt3 artdeco-button artdeco-button--primary"]').click()
    driver.find_element_by_xpath('//button[@class="fr ml2 artdeco-button artdeco-button--2 artdeco-button--primary ember-view"]').click()
    
# download "Followers" data file
def get_followers(driver):
    driver.get('https://www.linkedin.com/company/45891/admin/analytics/followers/')
    driver.find_element_by_xpath('//*[@id="ember1858"]/button').click()
    driver.find_element_by_xpath('//button[@class="fr ml2 artdeco-button artdeco-button--2 artdeco-button--primary ember-view"]').click()
    
            
    
def locate_excel():
    ## the folder that the csv file downloaded csv to
    files = glob.glob('/Users/xiqiaoliu/Downloads/*.xls')
    newest = files[0]
    return newest   


def restructure_visitors(sheetname):
    #restructure different sheets in the visitors spreadsheet
    if sheetname == 'Visitor metrics':
        df = pd.read_excel(locate_excel(),sheet_name="Visitor metrics")
        df = df.drop(df.iloc[:,7:-12],axis=1)
    elif sheetname == 'Location':
        df = pd.read_excel(locate_excel(),sheet_name='Location')
    elif sheetname == 'Job function':
        df = pd.read_excel(locate_excel(),sheet_name='Job function')
    elif sheetname == 'Seniority':
        df = pd.read_excel(locate_excel(),sheet_name='Seniority')
    elif sheetname == 'Industry':
        df = pd.read_excel(locate_excel(),sheet_name='Industry')
    elif sheetname == 'Company size':
        df = pd.read_excel(locate_excel(),sheet_name='Company size')
        
    return df

    
    
def import_postgres(df,table,spreadsheet):
    # import dataframe into tables
    try:
        
    #Connect to postgres
        engine = create_engine('postgresql+psycopg2://postgres:1234.@127.0.0.1:5432/ARF_DB')
        conn = engine.raw_connection()
        cur = conn.cursor()
        
        #write df to output
        output = io.StringIO()
        df.to_csv(output, sep='\t', header=False, index=False)
        output.seek(0)
       
        #copy from output to table
        cur.copy_from(output, table, null="") # null values become ''
        conn.commit()

    except:
        print('Failed to import dataset to temporary table')    

def sheet_to_table(dic,restructure):
    for sheet,table in dic:
        import_postgres(restructure,table)
        
    
    
# main function
def main():
    # Go to LinkedIn Analytics
    driver.get('https://www.linkedin.com/company/45891/admin/analytics/visitors/')
    fillform(driver)
    

    #Start pulling data from visitors
    get_visitors(driver)
    time.sleep(15)
    locate_excel()
    
    # Import different visitor's speadsheets into different tables
    visitors_dict = {'Visitor metrics':'linkedin_visitors_metrics','Location':'linkedin_visitors_location','Job function':'linkedin_visitors_job'}
    sheet_to_table(visitors_dict,restructure_visitors)
   
    #Start pulling data from visitors 
    get_update(driver)
    time.sleep(15)
    locate_excel()
    
    # Import different update's speadsheets into different tables
#    updates_dict = {'Update metrics (aggregated)':'linkedin_updates_metrics','Update engagement':'linkedin_updates_engagement'}
#    sheet_to_table(updates_dict,restructure_updates)
    
    #Start pulling data from followers
    get_followers(driver)
    time.sleep(15)
    locate_excel()
    
    #Import different follower's speadsheets
#    followers_dict = {'New followers':'linkedin_followers_new_followers','Location':'linkedin_followers_location','Job function':'linkedin_followers_job'}
#    sheet_to_table(followers_dict,restructure_followers)

main()
    
